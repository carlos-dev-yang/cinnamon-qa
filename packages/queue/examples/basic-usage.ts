/**
 * Í∏∞Î≥∏ ÌÅê ÏãúÏä§ÌÖú ÏÇ¨Ïö© ÏòàÏ†ú
 */

import { 
  connectRedis, 
  getQueueManager, 
  QueueNames, 
  JobPriority,
  type TestJobData 
} from '../src';

async function basicUsageExample() {
  console.log('üöÄ Basic Queue Usage Example');
  
  // 1. Redis Ïó∞Í≤∞
  console.log('\n1Ô∏è‚É£ Connecting to Redis...');
  const redisClient = await connectRedis();
  console.log('‚úÖ Redis connected');

  // 2. ÌÅê Îß§ÎãàÏ†Ä Í∞ÄÏ†∏Ïò§Í∏∞
  console.log('\n2Ô∏è‚É£ Getting queue manager...');
  const queueManager = getQueueManager();
  console.log('‚úÖ Queue manager ready');

  // 3. ÌÖåÏä§Ìä∏ ÏûëÏóÖ Ï∂îÍ∞Ä
  console.log('\n3Ô∏è‚É£ Adding test jobs...');
  
  const testJobs: TestJobData[] = [
    {
      testCaseId: 'login-test',
      testRunId: 'run-001',
      userId: 'user-123',
      config: {
        timeout: 30000,
        headless: true,
        viewport: { width: 1920, height: 1080 },
        adaptiveMode: true,
        maxAdaptations: 3,
      }
    },
    {
      testCaseId: 'checkout-test', 
      testRunId: 'run-002',
      userId: 'user-123',
      config: {
        timeout: 60000,
        headless: false,
        viewport: { width: 1280, height: 720 },
        adaptiveMode: true,
        maxAdaptations: 5,
      }
    }
  ];

  const jobs = [];
  for (const jobData of testJobs) {
    const job = await queueManager.addTestJob(jobData, {
      priority: JobPriority.NORMAL,
      attempts: 3,
    });
    jobs.push(job);
    console.log(`‚úÖ Added job ${job.id} for test case: ${jobData.testCaseId}`);
  }

  // 4. ÌÅê ÌÜµÍ≥Ñ ÌôïÏù∏
  console.log('\n4Ô∏è‚É£ Checking queue statistics...');
  const stats = await queueManager.getQueueStats(QueueNames.TEST_EXECUTION);
  console.log('üìä Queue stats:', {
    waiting: stats.waiting,
    active: stats.active,
    completed: stats.completed,
    failed: stats.failed,
  });

  // 5. ÏûëÏóÖ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ
  console.log('\n5Ô∏è‚É£ Setting up job monitoring...');
  const queueEvents = queueManager.createQueueEvents(QueueNames.TEST_EXECUTION);
  
  queueEvents.on('waiting', ({ jobId }) => {
    console.log(`‚è≥ Job ${jobId} is waiting in queue`);
  });

  queueEvents.on('active', ({ jobId }) => {
    console.log(`üèÉ Job ${jobId} started processing`);
  });

  queueEvents.on('progress', ({ jobId, data }) => {
    console.log(`üìä Job ${jobId} progress:`, data);
  });

  queueEvents.on('completed', ({ jobId, returnvalue }) => {
    console.log(`‚úÖ Job ${jobId} completed:`, returnvalue);
  });

  queueEvents.on('failed', ({ jobId, failedReason }) => {
    console.error(`‚ùå Job ${jobId} failed:`, failedReason);
  });

  // 6. Ï†ïÎ¶¨ (Ïã§Ï†ú ÏÇ¨Ïö©ÏóêÏÑúÎäî Ïù¥ Î∂ÄÎ∂ÑÏùÑ Ï†úÍ±∞ÌïòÍ≥† Í≥ÑÏÜç Ïã§Ìñâ)
  console.log('\n6Ô∏è‚É£ Cleaning up for demo...');
  
  // Ïû†Íπê ÎåÄÍ∏∞ (Ïã§Ï†ú Ï≤òÎ¶¨Î•º Î≥¥Í∏∞ ÏúÑÌï¥)
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  // Ï∂îÍ∞ÄÎêú ÏûëÏóÖÎì§ Ï†úÍ±∞
  for (const job of jobs) {
    await job.remove();
    console.log(`üóëÔ∏è Removed job ${job.id}`);
  }

  // Ïó∞Í≤∞ Ï¢ÖÎ£å
  await queueManager.close();
  await redisClient.disconnect();
  
  console.log('\nüéâ Basic usage example completed!');
}

// ÏóêÎü¨ Ìï∏Îì§ÎßÅÍ≥º Ìï®Íªò Ïã§Ìñâ
if (require.main === module) {
  basicUsageExample().catch(error => {
    console.error('‚ùå Example failed:', error);
    process.exit(1);
  });
}