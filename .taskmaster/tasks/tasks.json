{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and Infrastructure Configuration",
        "description": "Initialize the project repository with the required tech stack and configure Docker development environment",
        "details": "1. Create a new repository for the Cinnamon-QA project\n2. Set up the frontend React application with TypeScript\n   ```bash\n   npx create-react-app cinnamon-qa-client --template typescript\n   # Install dependencies\n   npm install tailwindcss postcss autoprefixer zustand\n   npm install @trpc/client @trpc/server @trpc/react-query\n   ```\n3. Set up the backend Fastify server with TypeScript\n   ```bash\n   mkdir cinnamon-qa-server\n   cd cinnamon-qa-server\n   npm init -y\n   npm install fastify @fastify/cors @trpc/server zod\n   npm install typescript ts-node @types/node --save-dev\n   ```\n4. Configure Docker and Docker Compose for development environment\n   ```yaml\n   # docker-compose.yml\n   version: '3.8'\n   services:\n     client:\n       build: ./client\n       ports:\n         - \"3000:3000\"\n       volumes:\n         - ./client:/app\n       depends_on:\n         - api\n     api:\n       build: ./server\n       ports:\n         - \"8080:8080\"\n       volumes:\n         - ./server:/app\n       depends_on:\n         - redis\n         - db\n     worker:\n       build: ./worker\n       volumes:\n         - ./worker:/app\n       depends_on:\n         - redis\n         - api\n     redis:\n       image: redis:alpine\n       ports:\n         - \"6379:6379\"\n     db:\n       image: supabase/postgres\n       ports:\n         - \"5432:5432\"\n       environment:\n         POSTGRES_PASSWORD: password\n         POSTGRES_USER: postgres\n     playwright-mcp:\n       image: mcr.microsoft.com/playwright:latest\n       volumes:\n         - ./playwright:/app\n   ```\n5. Configure GitHub Actions for CI\n   ```yaml\n   # .github/workflows/ci.yml\n   name: CI\n   on: [push, pull_request]\n   jobs:\n     test:\n       runs-on: ubuntu-latest\n       steps:\n         - uses: actions/checkout@v3\n         - uses: actions/setup-node@v3\n           with:\n             node-version: '18'\n         - name: Install dependencies\n           run: npm ci\n         - name: Run tests\n           run: npm test\n   ```",
        "testStrategy": "1. Verify that all Docker containers start successfully\n2. Ensure communication between services works as expected\n3. Validate that the development environment can be started with a single command\n4. Test that the CI pipeline runs successfully on push",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Database Schema Implementation",
        "description": "Design and implement the database schema in Supabase for storing test cases, test runs, and test steps",
        "details": "1. Set up Supabase project and connect to the PostgreSQL database\n2. Create the following tables in Supabase:\n\n   ```sql\n   -- TestCase table\n   CREATE TABLE test_cases (\n     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n     name TEXT NOT NULL,\n     url TEXT NOT NULL,\n     original_scenario TEXT NOT NULL,\n     refined_scenario TEXT,\n     created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n     updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n   );\n\n   -- TestRun table\n   CREATE TABLE test_runs (\n     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n     test_case_id UUID REFERENCES test_cases(id) ON DELETE CASCADE,\n     status TEXT NOT NULL CHECK (status IN ('pending', 'running', 'completed', 'failed')),\n     started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n     completed_at TIMESTAMP WITH TIME ZONE,\n     total_steps INTEGER NOT NULL DEFAULT 0,\n     completed_steps INTEGER NOT NULL DEFAULT 0,\n     failed_steps INTEGER NOT NULL DEFAULT 0\n   );\n\n   -- TestStep table\n   CREATE TABLE test_steps (\n     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n     test_run_id UUID REFERENCES test_runs(id) ON DELETE CASCADE,\n     step_number INTEGER NOT NULL,\n     action TEXT NOT NULL,\n     selector TEXT,\n     value TEXT,\n     status TEXT NOT NULL CHECK (status IN ('pending', 'running', 'success', 'failed')),\n     error_message TEXT,\n     snapshot_url TEXT,\n     dom_state JSONB,\n     console_logs JSONB,\n     executed_at TIMESTAMP WITH TIME ZONE,\n     duration INTEGER\n   );\n   ```\n\n3. Set up Supabase Storage buckets for storing test snapshots\n   ```typescript\n   // Create a bucket for test snapshots\n   const { data, error } = await supabase.storage.createBucket('test-snapshots', {\n     public: false\n   });\n   ```\n\n4. Create TypeScript interfaces matching the database schema\n   ```typescript\n   // src/types/database.ts\n   export interface TestCase {\n     id: string;\n     name: string;\n     url: string;\n     originalScenario: string;\n     refinedScenario: string | null;\n     createdAt: Date;\n     updatedAt: Date;\n   }\n\n   export interface TestRun {\n     id: string;\n     testCaseId: string;\n     status: 'pending' | 'running' | 'completed' | 'failed';\n     startedAt: Date;\n     completedAt?: Date;\n     totalSteps: number;\n     completedSteps: number;\n     failedSteps: number;\n   }\n\n   export interface TestStep {\n     id: string;\n     testRunId: string;\n     stepNumber: number;\n     action: string;\n     selector?: string;\n     value?: string;\n     status: 'pending' | 'running' | 'success' | 'failed';\n     errorMessage?: string;\n     snapshotUrl?: string;\n     domState?: object;\n     consoleLogs?: string[];\n     executedAt?: Date;\n     duration?: number;\n   }\n   ```\n\n5. Implement database access functions using Supabase client\n   ```typescript\n   // src/lib/supabase.ts\n   import { createClient } from '@supabase/supabase-js';\n\n   const supabaseUrl = process.env.SUPABASE_URL as string;\n   const supabaseKey = process.env.SUPABASE_KEY as string;\n\n   export const supabase = createClient(supabaseUrl, supabaseKey);\n   ```",
        "testStrategy": "1. Write unit tests for database access functions\n2. Test CRUD operations for each table\n3. Verify foreign key constraints work correctly\n4. Test storage bucket operations for snapshots\n5. Validate that TypeScript interfaces match the database schema",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "tRPC API Server Implementation",
        "description": "Implement the tRPC API server with Fastify for handling test case management and test execution",
        "details": "1. Set up the tRPC server with Fastify\n   ```typescript\n   // src/server.ts\n   import { fastify } from 'fastify';\n   import { fastifyTRPCPlugin } from '@trpc/server/adapters/fastify';\n   import cors from '@fastify/cors';\n   import { createContext } from './context';\n   import { appRouter } from './router';\n\n   const server = fastify({\n     maxParamLength: 5000,\n   });\n\n   server.register(cors, {\n     origin: true,\n   });\n\n   server.register(fastifyTRPCPlugin, {\n     prefix: '/trpc',\n     trpcOptions: { router: appRouter, createContext },\n   });\n\n   server.listen({ port: 8080 }, (err) => {\n     if (err) {\n       console.error(err);\n       process.exit(1);\n     }\n     console.log('Server listening on port 8080');\n   });\n   ```\n\n2. Implement the tRPC router structure\n   ```typescript\n   // src/router/index.ts\n   import { router } from '../trpc';\n   import { testCaseRouter } from './testCase';\n   import { testRunRouter } from './testRun';\n   import { testStepRouter } from './testStep';\n\n   export const appRouter = router({\n     testCase: testCaseRouter,\n     testRun: testRunRouter,\n     testStep: testStepRouter,\n   });\n\n   export type AppRouter = typeof appRouter;\n   ```\n\n3. Implement the test case router\n   ```typescript\n   // src/router/testCase.ts\n   import { z } from 'zod';\n   import { procedure, router } from '../trpc';\n   import { supabase } from '../lib/supabase';\n\n   export const testCaseRouter = router({\n     create: procedure\n       .input(z.object({\n         name: z.string(),\n         url: z.string().url(),\n         originalScenario: z.string(),\n       }))\n       .mutation(async ({ input }) => {\n         const { data, error } = await supabase\n           .from('test_cases')\n           .insert({\n             name: input.name,\n             url: input.url,\n             original_scenario: input.originalScenario,\n           })\n           .select();\n\n         if (error) throw error;\n         return data[0];\n       }),\n\n     list: procedure.query(async () => {\n       const { data, error } = await supabase\n         .from('test_cases')\n         .select('*')\n         .order('created_at', { ascending: false });\n\n       if (error) throw error;\n       return data;\n     }),\n\n     get: procedure\n       .input(z.object({ id: z.string().uuid() }))\n       .query(async ({ input }) => {\n         const { data, error } = await supabase\n           .from('test_cases')\n           .select('*')\n           .eq('id', input.id)\n           .single();\n\n         if (error) throw error;\n         return data;\n       }),\n\n     duplicate: procedure\n       .input(z.object({ id: z.string().uuid() }))\n       .mutation(async ({ input }) => {\n         // Get the original test case\n         const { data: original, error: getError } = await supabase\n           .from('test_cases')\n           .select('*')\n           .eq('id', input.id)\n           .single();\n\n         if (getError) throw getError;\n\n         // Create a duplicate\n         const { data, error } = await supabase\n           .from('test_cases')\n           .insert({\n             name: `${original.name} (Copy)`,\n             url: original.url,\n             original_scenario: original.original_scenario,\n             refined_scenario: original.refined_scenario,\n           })\n           .select();\n\n         if (error) throw error;\n         return data[0];\n       }),\n   });\n   ```\n\n4. Implement the test run router with SSE support\n   ```typescript\n   // src/router/testRun.ts\n   import { z } from 'zod';\n   import { procedure, router } from '../trpc';\n   import { supabase } from '../lib/supabase';\n   import { observable } from '@trpc/server/observable';\n   import { redisClient } from '../lib/redis';\n\n   export const testRunRouter = router({\n     create: procedure\n       .input(z.object({\n         testCaseId: z.string().uuid(),\n       }))\n       .mutation(async ({ input }) => {\n         // Create a new test run\n         const { data, error } = await supabase\n           .from('test_runs')\n           .insert({\n             test_case_id: input.testCaseId,\n             status: 'pending',\n           })\n           .select();\n\n         if (error) throw error;\n\n         // Add job to Redis queue\n         await redisClient.lpush('test_jobs', JSON.stringify({\n           id: crypto.randomUUID(),\n           testRunId: data[0].id,\n           testCaseId: input.testCaseId,\n           priority: 1,\n           createdAt: new Date(),\n         }));\n\n         return data[0];\n       }),\n\n     get: procedure\n       .input(z.object({ id: z.string().uuid() }))\n       .query(async ({ input }) => {\n         const { data, error } = await supabase\n           .from('test_runs')\n           .select('*')\n           .eq('id', input.id)\n           .single();\n\n         if (error) throw error;\n         return data;\n       }),\n\n     subscribe: procedure\n       .input(z.object({ testRunId: z.string().uuid() }))\n       .subscription(({ input }) => {\n         return observable<any>((emit) => {\n           const channel = `test_run:${input.testRunId}`;\n           \n           // Subscribe to Redis channel for updates\n           const subscriber = redisClient.duplicate();\n           \n           subscriber.subscribe(channel, (message) => {\n             emit.next(JSON.parse(message));\n           });\n\n           return () => {\n             subscriber.unsubscribe(channel);\n             subscriber.quit();\n           };\n         });\n       }),\n   });\n   ```\n\n5. Implement the test step router\n   ```typescript\n   // src/router/testStep.ts\n   import { z } from 'zod';\n   import { procedure, router } from '../trpc';\n   import { supabase } from '../lib/supabase';\n\n   export const testStepRouter = router({\n     list: procedure\n       .input(z.object({ testRunId: z.string().uuid() }))\n       .query(async ({ input }) => {\n         const { data, error } = await supabase\n           .from('test_steps')\n           .select('*')\n           .eq('test_run_id', input.testRunId)\n           .order('step_number', { ascending: true });\n\n         if (error) throw error;\n         return data;\n       }),\n   });\n   ```",
        "testStrategy": "1. Write unit tests for each tRPC procedure\n2. Test error handling for invalid inputs\n3. Test SSE subscription functionality\n4. Verify Redis queue integration\n5. Test API endpoints using a tool like Postman or Insomnia",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Worker Process Implementation",
        "description": "Implement the worker process for handling test execution in the background using Redis queue",
        "details": "1. Set up the worker process structure\n   ```typescript\n   // src/worker.ts\n   import { redisClient } from './lib/redis';\n   import { supabase } from './lib/supabase';\n   import { processTestRun } from './lib/testProcessor';\n\n   async function startWorker() {\n     console.log('Worker started');\n     \n     while (true) {\n       try {\n         // Pop job from queue\n         const jobData = await redisClient.brpop('test_jobs', 0);\n         \n         if (jobData && jobData[1]) {\n           const job = JSON.parse(jobData[1]);\n           console.log(`Processing job: ${job.id}`);\n           \n           // Update test run status\n           await supabase\n             .from('test_runs')\n             .update({ status: 'running' })\n             .eq('id', job.testRunId);\n           \n           // Process the test run\n           await processTestRun(job.testRunId, job.testCaseId);\n         }\n       } catch (error) {\n         console.error('Error processing job:', error);\n         // Wait before retrying\n         await new Promise(resolve => setTimeout(resolve, 5000));\n       }\n     }\n   }\n\n   startWorker().catch(console.error);\n   ```\n\n2. Implement the test processor\n   ```typescript\n   // src/lib/testProcessor.ts\n   import { supabase } from './supabase';\n   import { redisClient } from './redis';\n   import { analyzeScenario } from './ai';\n   import { runPlaywrightTest } from './playwright';\n\n   export async function processTestRun(testRunId: string, testCaseId: string) {\n     try {\n       // Get test case details\n       const { data: testCase, error: testCaseError } = await supabase\n         .from('test_cases')\n         .select('*')\n         .eq('id', testCaseId)\n         .single();\n\n       if (testCaseError) throw testCaseError;\n\n       // Analyze scenario with AI if not already refined\n       if (!testCase.refined_scenario) {\n         const refinedScenario = await analyzeScenario(testCase.original_scenario, testCase.url);\n         \n         // Update test case with refined scenario\n         await supabase\n           .from('test_cases')\n           .update({ refined_scenario: refinedScenario.text })\n           .eq('id', testCaseId);\n         \n         // Create test steps\n         const steps = refinedScenario.steps;\n         const totalSteps = steps.length;\n         \n         // Update test run with total steps\n         await supabase\n           .from('test_runs')\n           .update({ total_steps: totalSteps })\n           .eq('id', testRunId);\n         \n         // Insert test steps\n         for (let i = 0; i < steps.length; i++) {\n           await supabase\n             .from('test_steps')\n             .insert({\n               test_run_id: testRunId,\n               step_number: i + 1,\n               action: steps[i].action,\n               selector: steps[i].selector,\n               value: steps[i].value,\n               status: 'pending',\n             });\n         }\n       }\n\n       // Run the test with Playwright\n       await runPlaywrightTest(testRunId, testCase.url);\n\n       // Update test run status to completed\n       await supabase\n         .from('test_runs')\n         .update({\n           status: 'completed',\n           completed_at: new Date().toISOString(),\n         })\n         .eq('id', testRunId);\n\n       // Publish completion event\n       await redisClient.publish(\n         `test_run:${testRunId}`,\n         JSON.stringify({\n           type: 'test_complete',\n           testRunId,\n           status: 'completed',\n           timestamp: new Date(),\n         })\n       );\n\n     } catch (error) {\n       console.error('Error processing test run:', error);\n       \n       // Update test run status to failed\n       await supabase\n         .from('test_runs')\n         .update({\n           status: 'failed',\n           completed_at: new Date().toISOString(),\n         })\n         .eq('id', testRunId);\n\n       // Publish error event\n       await redisClient.publish(\n         `test_run:${testRunId}`,\n         JSON.stringify({\n           type: 'test_error',\n           testRunId,\n           status: 'failed',\n           message: error.message,\n           timestamp: new Date(),\n         })\n       );\n     }\n   }\n   ```\n\n3. Set up Redis client\n   ```typescript\n   // src/lib/redis.ts\n   import { createClient } from 'redis';\n\n   const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';\n\n   export const redisClient = createClient({\n     url: redisUrl,\n   });\n\n   redisClient.connect().catch(console.error);\n\n   redisClient.on('error', (err) => {\n     console.error('Redis error:', err);\n   });\n\n   process.on('SIGINT', async () => {\n     await redisClient.quit();\n     process.exit(0);\n   });\n   ```\n\n4. Implement real-time progress updates\n   ```typescript\n   // Function to publish step progress\n   export async function publishStepProgress(testRunId: string, stepId: string, status: string, data: any = {}) {\n     const event = {\n       type: `step_${status}`,\n       stepId,\n       status,\n       ...data,\n       timestamp: new Date(),\n     };\n\n     await redisClient.publish(`test_run:${testRunId}`, JSON.stringify(event));\n   }\n   ```",
        "testStrategy": "1. Test the worker process with mock test jobs\n2. Verify that the worker correctly processes jobs from the Redis queue\n3. Test error handling and recovery mechanisms\n4. Verify real-time progress updates via Redis pub/sub\n5. Test the worker's ability to handle multiple jobs sequentially",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "AI Integration with Google Gemini",
        "description": "Implement the AI component for analyzing natural language test scenarios using Google Gemini API and LangChain",
        "details": "1. Set up Google Gemini API client\n   ```typescript\n   // src/lib/ai/gemini.ts\n   import { GoogleGenerativeAI } from '@google/generative-ai';\n\n   const API_KEY = process.env.GEMINI_API_KEY;\n   const genAI = new GoogleGenerativeAI(API_KEY);\n\n   export async function getGeminiResponse(prompt: string) {\n     const model = genAI.getGenerativeModel({ model: 'gemini-pro' });\n     const result = await model.generateContent(prompt);\n     const response = await result.response;\n     return response.text();\n   }\n   ```\n\n2. Implement LangChain for prompt management\n   ```typescript\n   // src/lib/ai/prompts.ts\n   import { PromptTemplate } from 'langchain/prompts';\n\n   export const scenarioAnalysisPrompt = PromptTemplate.fromTemplate(`\n   You are an expert in converting natural language test scenarios into structured test steps.\n   Analyze the following test scenario for the website at URL: {url}\n\n   Test Scenario:\n   {scenario}\n\n   Convert this scenario into a series of specific test steps that can be automated using Playwright.\n   For each step, provide:\n   1. The action to perform (click, type, navigate, assert, etc.)\n   2. The selector to target (if applicable)\n   3. The value to use (if applicable)\n\n   Return your response as a JSON array of steps in the following format:\n   [\n     {\n       \"action\": \"navigate\",\n       \"value\": \"https://example.com\"\n     },\n     {\n       \"action\": \"click\",\n       \"selector\": \"button[data-testid='submit']\"\n     },\n     {\n       \"action\": \"type\",\n       \"selector\": \"input[name='username']\",\n       \"value\": \"testuser\"\n     },\n     {\n       \"action\": \"assert\",\n       \"selector\": \".success-message\",\n       \"value\": \"Login successful\"\n     }\n   ]\n\n   Be specific with selectors, preferring data-testid, id, or unique class names.\n   Include assertions to verify expected outcomes.\n   `);\n   ```\n\n3. Implement the scenario analysis function\n   ```typescript\n   // src/lib/ai/index.ts\n   import { getGeminiResponse } from './gemini';\n   import { scenarioAnalysisPrompt } from './prompts';\n\n   export async function analyzeScenario(scenario: string, url: string) {\n     try {\n       // Format the prompt using LangChain\n       const prompt = await scenarioAnalysisPrompt.format({\n         scenario,\n         url,\n       });\n\n       // Get response from Gemini\n       const response = await getGeminiResponse(prompt);\n\n       // Extract JSON array from response\n       const jsonMatch = response.match(/\\[\\s*\\{.*\\}\\s*\\]/s);\n       if (!jsonMatch) {\n         throw new Error('Failed to parse steps from AI response');\n       }\n\n       const steps = JSON.parse(jsonMatch[0]);\n\n       // Validate steps format\n       if (!Array.isArray(steps) || steps.length === 0) {\n         throw new Error('Invalid steps format returned by AI');\n       }\n\n       return {\n         text: response,\n         steps,\n       };\n     } catch (error) {\n       console.error('Error analyzing scenario:', error);\n       throw error;\n     }\n   }\n   ```\n\n4. Implement retry logic for AI requests\n   ```typescript\n   // Enhanced getGeminiResponse with retry logic\n   export async function getGeminiResponse(prompt: string, maxRetries = 3) {\n     let retries = 0;\n     while (retries < maxRetries) {\n       try {\n         const model = genAI.getGenerativeModel({ model: 'gemini-pro' });\n         const result = await model.generateContent(prompt);\n         const response = await result.response;\n         return response.text();\n       } catch (error) {\n         retries++;\n         console.error(`AI request failed (attempt ${retries}/${maxRetries}):`, error);\n         if (retries >= maxRetries) throw error;\n         // Exponential backoff\n         await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, retries)));\n       }\n     }\n   }\n   ```",
        "testStrategy": "1. Write unit tests for the AI integration functions\n2. Test with various test scenarios to ensure accurate parsing\n3. Verify error handling and retry logic\n4. Test with edge cases (very long scenarios, ambiguous instructions)\n5. Measure response time and optimize if necessary",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Playwright MCP Integration",
        "description": "Implement the integration with Playwright MCP (Model Context Protocol) for executing E2E tests in Docker containers",
        "details": "1. Set up Playwright MCP client\n   ```typescript\n   // src/lib/playwright/index.ts\n   import { chromium } from 'playwright';\n   import { supabase } from '../supabase';\n   import { publishStepProgress } from '../redis';\n\n   export async function runPlaywrightTest(testRunId: string, baseUrl: string) {\n     // Get test steps\n     const { data: steps, error } = await supabase\n       .from('test_steps')\n       .select('*')\n       .eq('test_run_id', testRunId)\n       .order('step_number', { ascending: true });\n\n     if (error) throw error;\n\n     // Launch browser\n     const browser = await chromium.launch({\n       headless: true,\n     });\n\n     const context = await browser.newContext({\n       viewport: { width: 1280, height: 720 },\n       recordVideo: { dir: './videos/' },\n     });\n\n     const page = await context.newPage();\n\n     // Enable console logging\n     const consoleLogs: string[] = [];\n     page.on('console', (msg) => {\n       consoleLogs.push(`${msg.type()}: ${msg.text()}`);\n     });\n\n     try {\n       // Execute each step\n       for (const step of steps) {\n         // Update step status to running\n         await supabase\n           .from('test_steps')\n           .update({ status: 'running', executed_at: new Date().toISOString() })\n           .eq('id', step.id);\n\n         // Publish step start event\n         await publishStepProgress(testRunId, step.id, 'start');\n\n         const startTime = Date.now();\n\n         try {\n           // Execute step based on action type\n           switch (step.action) {\n             case 'navigate':\n               await page.goto(step.value || baseUrl);\n               break;\n\n             case 'click':\n               await page.click(step.selector);\n               break;\n\n             case 'type':\n               await page.fill(step.selector, step.value || '');\n               break;\n\n             case 'select':\n               await page.selectOption(step.selector, step.value || '');\n               break;\n\n             case 'assert':\n               await page.waitForSelector(step.selector);\n               if (step.value) {\n                 const text = await page.textContent(step.selector);\n                 if (!text || !text.includes(step.value)) {\n                   throw new Error(`Assertion failed: Expected \"${step.value}\" in \"${text}\"`);\n                 }\n               }\n               break;\n\n             case 'wait':\n               await page.waitForTimeout(parseInt(step.value || '1000'));\n               break;\n\n             default:\n               throw new Error(`Unknown action: ${step.action}`);\n           }\n\n           // Take screenshot after step\n           const screenshot = await page.screenshot();\n           const snapshotPath = `test-runs/${testRunId}/step-${step.step_number}.png`;\n           \n           // Upload screenshot to Supabase Storage\n           const { data: uploadData, error: uploadError } = await supabase.storage\n             .from('test-snapshots')\n             .upload(snapshotPath, screenshot, {\n               contentType: 'image/png',\n               upsert: true,\n             });\n\n           if (uploadError) throw uploadError;\n\n           // Get public URL for the snapshot\n           const { data: urlData } = supabase.storage\n             .from('test-snapshots')\n             .getPublicUrl(snapshotPath);\n\n           const endTime = Date.now();\n           const duration = endTime - startTime;\n\n           // Update step status to success\n           await supabase\n             .from('test_steps')\n             .update({\n               status: 'success',\n               snapshot_url: urlData.publicUrl,\n               console_logs: consoleLogs,\n               duration,\n             })\n             .eq('id', step.id);\n\n           // Update test run progress\n           await supabase\n             .from('test_runs')\n             .update({\n               completed_steps: supabase.rpc('increment', { x: 1 }),\n             })\n             .eq('id', testRunId);\n\n           // Publish step complete event\n           await publishStepProgress(testRunId, step.id, 'complete', {\n             snapshot: urlData.publicUrl,\n             duration,\n           });\n\n           // Clear console logs for next step\n           consoleLogs.length = 0;\n\n         } catch (stepError) {\n           const endTime = Date.now();\n           const duration = endTime - startTime;\n\n           // Take screenshot of error state\n           const screenshot = await page.screenshot();\n           const snapshotPath = `test-runs/${testRunId}/step-${step.step_number}-error.png`;\n           \n           // Upload error screenshot\n           const { data: uploadData, error: uploadError } = await supabase.storage\n             .from('test-snapshots')\n             .upload(snapshotPath, screenshot, {\n               contentType: 'image/png',\n               upsert: true,\n             });\n\n           // Get public URL for the error snapshot\n           const { data: urlData } = supabase.storage\n             .from('test-snapshots')\n             .getPublicUrl(snapshotPath);\n\n           // Update step status to failed\n           await supabase\n             .from('test_steps')\n             .update({\n               status: 'failed',\n               error_message: stepError.message,\n               snapshot_url: urlData.publicUrl,\n               console_logs: consoleLogs,\n               duration,\n             })\n             .eq('id', step.id);\n\n           // Update test run progress\n           await supabase\n             .from('test_runs')\n             .update({\n               completed_steps: supabase.rpc('increment', { x: 1 }),\n               failed_steps: supabase.rpc('increment', { x: 1 }),\n             })\n             .eq('id', testRunId);\n\n           // Publish step error event\n           await publishStepProgress(testRunId, step.id, 'error', {\n             message: stepError.message,\n             snapshot: urlData.publicUrl,\n             duration,\n           });\n\n           // Stop execution on first error\n           break;\n         }\n       }\n     } finally {\n       // Close browser\n       await context.close();\n       await browser.close();\n     }\n   }\n   ```\n\n2. Configure Playwright in Docker\n   ```dockerfile\n   # Dockerfile.playwright\n   FROM mcr.microsoft.com/playwright:latest\n\n   WORKDIR /app\n\n   COPY package*.json ./\n   RUN npm install\n\n   COPY . .\n\n   CMD [\"node\", \"dist/playwright-worker.js\"]\n   ```\n\n3. Implement timeout handling\n   ```typescript\n   // Enhanced step execution with timeout\n   const STEP_TIMEOUT = 30000; // 30 seconds\n\n   // Execute step with timeout\n   const executeStepWithTimeout = async (fn: () => Promise<void>) => {\n     return new Promise<void>(async (resolve, reject) => {\n       const timeoutId = setTimeout(() => {\n         reject(new Error('Step execution timed out after 30 seconds'));\n       }, STEP_TIMEOUT);\n\n       try {\n         await fn();\n         clearTimeout(timeoutId);\n         resolve();\n       } catch (error) {\n         clearTimeout(timeoutId);\n         reject(error);\n       }\n     });\n   };\n   ```\n\n4. Implement DOM state capture\n   ```typescript\n   // Capture DOM state for debugging\n   async function captureDOMState(page) {\n     return await page.evaluate(() => {\n       const getElementInfo = (element) => {\n         const rect = element.getBoundingClientRect();\n         return {\n           tag: element.tagName.toLowerCase(),\n           id: element.id,\n           className: element.className,\n           text: element.textContent?.trim().substring(0, 100),\n           visible: rect.width > 0 && rect.height > 0,\n           position: {\n             x: rect.x,\n             y: rect.y,\n             width: rect.width,\n             height: rect.height,\n           },\n         };\n       };\n\n       const interactiveElements = Array.from(document.querySelectorAll('button, a, input, select, textarea'));\n       return {\n         url: window.location.href,\n         title: document.title,\n         interactiveElements: interactiveElements.map(getElementInfo),\n       };\n     });\n   }\n   ```",
        "testStrategy": "1. Test Playwright integration with simple test scenarios\n2. Verify screenshot capture and storage\n3. Test error handling and reporting\n4. Verify timeout handling\n5. Test with various browser actions (click, type, assert, etc.)",
        "priority": "high",
        "dependencies": [
          2,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "React Client Implementation",
        "description": "Implement the React client application with TypeScript, Tailwind CSS, and tRPC client integration",
        "details": "1. Set up React project with TypeScript and Tailwind CSS\n   ```bash\n   npx create-react-app cinnamon-qa-client --template typescript\n   cd cinnamon-qa-client\n   npm install tailwindcss postcss autoprefixer\n   npx tailwindcss init -p\n   ```\n\n2. Configure Tailwind CSS\n   ```javascript\n   // tailwind.config.js\n   module.exports = {\n     content: [\n       './src/**/*.{js,jsx,ts,tsx}',\n     ],\n     theme: {\n       extend: {},\n     },\n     plugins: [],\n   }\n   ```\n\n3. Set up tRPC client\n   ```typescript\n   // src/utils/trpc.ts\n   import { createTRPCReact } from '@trpc/react-query';\n   import { httpBatchLink } from '@trpc/client';\n   import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n   import type { AppRouter } from '../../server/src/router';\n\n   export const trpc = createTRPCReact<AppRouter>();\n\n   export const queryClient = new QueryClient();\n\n   export const trpcClient = trpc.createClient({\n     links: [\n       httpBatchLink({\n         url: 'http://localhost:8080/trpc',\n       }),\n     ],\n   });\n   ```\n\n4. Create main application component\n   ```typescript\n   // src/App.tsx\n   import React from 'react';\n   import { QueryClientProvider } from '@tanstack/react-query';\n   import { trpc, trpcClient, queryClient } from './utils/trpc';\n   import { BrowserRouter, Routes, Route } from 'react-router-dom';\n   import TestCaseList from './pages/TestCaseList';\n   import CreateTestCase from './pages/CreateTestCase';\n   import TestRunDetails from './pages/TestRunDetails';\n   import Navbar from './components/Navbar';\n\n   function App() {\n     return (\n       <trpc.Provider client={trpcClient} queryClient={queryClient}>\n         <QueryClientProvider client={queryClient}>\n           <BrowserRouter>\n             <div className=\"min-h-screen bg-gray-100\">\n               <Navbar />\n               <main className=\"container mx-auto py-6 px-4\">\n                 <Routes>\n                   <Route path=\"/\" element={<TestCaseList />} />\n                   <Route path=\"/create\" element={<CreateTestCase />} />\n                   <Route path=\"/test-run/:id\" element={<TestRunDetails />} />\n                 </Routes>\n               </main>\n             </div>\n           </BrowserRouter>\n         </QueryClientProvider>\n       </trpc.Provider>\n     );\n   }\n\n   export default App;\n   ```\n\n5. Implement test case creation page\n   ```typescript\n   // src/pages/CreateTestCase.tsx\n   import React, { useState } from 'react';\n   import { useNavigate } from 'react-router-dom';\n   import { trpc } from '../utils/trpc';\n\n   const CreateTestCase = () => {\n     const navigate = useNavigate();\n     const [name, setName] = useState('');\n     const [url, setUrl] = useState('');\n     const [scenario, setScenario] = useState('');\n     const [isSubmitting, setIsSubmitting] = useState(false);\n\n     const createTestCase = trpc.testCase.create.useMutation({\n       onSuccess: (data) => {\n         navigate('/');\n       },\n     });\n\n     const handleSubmit = async (e: React.FormEvent) => {\n       e.preventDefault();\n       setIsSubmitting(true);\n       \n       try {\n         await createTestCase.mutateAsync({\n           name,\n           url,\n           originalScenario: scenario,\n         });\n       } catch (error) {\n         console.error('Error creating test case:', error);\n       } finally {\n         setIsSubmitting(false);\n       }\n     };\n\n     return (\n       <div className=\"max-w-2xl mx-auto bg-white p-6 rounded-lg shadow\">\n         <h1 className=\"text-2xl font-bold mb-6\">Create New Test Case</h1>\n         \n         <form onSubmit={handleSubmit}>\n           <div className=\"mb-4\">\n             <label className=\"block text-gray-700 mb-2\" htmlFor=\"name\">\n               Test Name\n             </label>\n             <input\n               id=\"name\"\n               type=\"text\"\n               className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n               value={name}\n               onChange={(e) => setName(e.target.value)}\n               required\n             />\n           </div>\n           \n           <div className=\"mb-4\">\n             <label className=\"block text-gray-700 mb-2\" htmlFor=\"url\">\n               Website URL\n             </label>\n             <input\n               id=\"url\"\n               type=\"url\"\n               className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n               value={url}\n               onChange={(e) => setUrl(e.target.value)}\n               placeholder=\"https://example.com\"\n               required\n             />\n           </div>\n           \n           <div className=\"mb-6\">\n             <label className=\"block text-gray-700 mb-2\" htmlFor=\"scenario\">\n               Test Scenario (in natural language)\n             </label>\n             <textarea\n               id=\"scenario\"\n               className=\"w-full px-3 py-2 border border-gray-300 rounded-md h-40\"\n               value={scenario}\n               onChange={(e) => setScenario(e.target.value)}\n               placeholder=\"Describe your test scenario in natural language...\"\n               required\n             />\n           </div>\n           \n           <button\n             type=\"submit\"\n             className=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 disabled:bg-blue-300\"\n             disabled={isSubmitting}\n           >\n             {isSubmitting ? 'Creating...' : 'Create Test Case'}\n           </button>\n         </form>\n       </div>\n     );\n   };\n\n   export default CreateTestCase;\n   ```\n\n6. Implement test run details page with real-time updates\n   ```typescript\n   // src/pages/TestRunDetails.tsx\n   import React, { useEffect, useState } from 'react';\n   import { useParams } from 'react-router-dom';\n   import { trpc } from '../utils/trpc';\n\n   const TestRunDetails = () => {\n     const { id } = useParams<{ id: string }>();\n     const [testRunData, setTestRunData] = useState<any>(null);\n     const [steps, setSteps] = useState<any[]>([]);\n\n     const testRun = trpc.testRun.get.useQuery({ id: id! }, {\n       enabled: !!id,\n       onSuccess: (data) => {\n         setTestRunData(data);\n       },\n     });\n\n     const testSteps = trpc.testStep.list.useQuery({ testRunId: id! }, {\n       enabled: !!id,\n       onSuccess: (data) => {\n         setSteps(data);\n       },\n     });\n\n     // Subscribe to real-time updates\n     useEffect(() => {\n       if (!id) return;\n\n       const subscription = trpc.testRun.subscribe.useSubscription(\n         { testRunId: id },\n         {\n           onData: (data) => {\n             // Handle different event types\n             if (data.type === 'test_complete') {\n               // Refresh test run data\n               testRun.refetch();\n             } else if (data.type.startsWith('step_')) {\n               // Update step status\n               testSteps.refetch();\n             }\n           },\n         }\n       );\n\n       return () => {\n         subscription.unsubscribe();\n       };\n     }, [id]);\n\n     if (testRun.isLoading) {\n       return <div className=\"text-center py-10\">Loading test run data...</div>;\n     }\n\n     if (testRun.isError) {\n       return <div className=\"text-center py-10 text-red-500\">Error loading test run</div>;\n     }\n\n     return (\n       <div className=\"max-w-4xl mx-auto bg-white p-6 rounded-lg shadow\">\n         <h1 className=\"text-2xl font-bold mb-6\">Test Run Details</h1>\n         \n         {/* Test Run Info */}\n         <div className=\"mb-6 p-4 bg-gray-50 rounded-md\">\n           <div className=\"flex justify-between items-center\">\n             <div>\n               <h2 className=\"text-lg font-semibold\">{testRunData?.name || 'Test Run'}</h2>\n               <p className=\"text-gray-600\">{testRunData?.url}</p>\n             </div>\n             <div className=\"text-right\">\n               <span className={`px-3 py-1 rounded-full text-sm ${getStatusColor(testRunData?.status)}`}>\n                 {testRunData?.status}\n               </span>\n               <p className=\"text-sm text-gray-500 mt-1\">\n                 Started: {new Date(testRunData?.startedAt).toLocaleString()}\n               </p>\n             </div>\n           </div>\n           \n           {/* Progress Bar */}\n           <div className=\"mt-4\">\n             <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n               <div \n                 className=\"bg-blue-600 h-2.5 rounded-full\" \n                 style={{ width: `${calculateProgress(testRunData)}%` }}\n               ></div>\n             </div>\n             <div className=\"flex justify-between text-sm mt-1\">\n               <span>{testRunData?.completedSteps || 0} / {testRunData?.totalSteps || 0} steps</span>\n               <span>{testRunData?.failedSteps || 0} failed</span>\n             </div>\n           </div>\n         </div>\n         \n         {/* Test Steps */}\n         <div className=\"space-y-4\">\n           <h3 className=\"text-lg font-semibold\">Test Steps</h3>\n           \n           {steps.map((step) => (\n             <div \n               key={step.id} \n               className={`p-4 border rounded-md ${getStepStatusColor(step.status)}`}\n             >\n               <div className=\"flex justify-between items-start\">\n                 <div>\n                   <span className=\"font-medium\">Step {step.stepNumber}:</span> {getActionDescription(step)}\n                   {step.errorMessage && (\n                     <p className=\"text-red-500 mt-2\">{step.errorMessage}</p>\n                   )}\n                 </div>\n                 <span className={`px-2 py-1 rounded text-xs ${getStatusColor(step.status)}`}>\n                   {step.status}\n                 </span>\n               </div>\n               \n               {/* Step Screenshot */}\n               {step.snapshotUrl && (\n                 <div className=\"mt-3\">\n                   <img \n                     src={step.snapshotUrl} \n                     alt={`Step ${step.stepNumber} screenshot`} \n                     className=\"border rounded-md max-h-40 object-contain\"\n                   />\n                 </div>\n               )}\n             </div>\n           ))}\n           \n           {steps.length === 0 && (\n             <p className=\"text-gray-500 text-center py-4\">No steps available yet</p>\n           )}\n         </div>\n       </div>\n     );\n   };\n\n   // Helper functions\n   function calculateProgress(testRun) {\n     if (!testRun || !testRun.totalSteps) return 0;\n     return Math.round((testRun.completedSteps / testRun.totalSteps) * 100);\n   }\n\n   function getStatusColor(status) {\n     switch (status) {\n       case 'completed': return 'bg-green-100 text-green-800';\n       case 'running': return 'bg-blue-100 text-blue-800';\n       case 'failed': return 'bg-red-100 text-red-800';\n       default: return 'bg-gray-100 text-gray-800';\n     }\n   }\n\n   function getStepStatusColor(status) {\n     switch (status) {\n       case 'success': return 'border-green-200 bg-green-50';\n       case 'running': return 'border-blue-200 bg-blue-50';\n       case 'failed': return 'border-red-200 bg-red-50';\n       default: return 'border-gray-200';\n     }\n   }\n\n   function getActionDescription(step) {\n     switch (step.action) {\n       case 'navigate': return `Navigate to ${step.value}`;\n       case 'click': return `Click on ${step.selector}`;\n       case 'type': return `Type \"${step.value}\" into ${step.selector}`;\n       case 'assert': return `Assert that ${step.selector} contains \"${step.value}\"`;\n       default: return `${step.action} ${step.selector} ${step.value}`;\n     }\n   }\n\n   export default TestRunDetails;\n   ```",
        "testStrategy": "1. Write unit tests for React components using React Testing Library\n2. Test form validation and submission\n3. Test real-time updates with mock SSE events\n4. Test responsive design across different screen sizes\n5. Test error handling and loading states",
        "priority": "high",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Real-time Progress Monitoring with SSE",
        "description": "Implement Server-Sent Events (SSE) for real-time test progress monitoring",
        "details": "1. Set up SSE endpoint in the API server\n   ```typescript\n   // src/server.ts (add to existing Fastify server)\n   import { FastifySSEPlugin } from 'fastify-sse-v2';\n\n   server.register(FastifySSEPlugin);\n\n   server.get('/sse/test-run/:id', async (request, reply) => {\n     const { id } = request.params as { id: string };\n     \n     // Set headers for SSE\n     reply.sse({\n       event: 'connected',\n       data: JSON.stringify({ message: 'Connected to test run updates' }),\n     });\n\n     // Subscribe to Redis channel\n     const subscriber = redisClient.duplicate();\n     await subscriber.connect();\n     await subscriber.subscribe(`test_run:${id}`, (message) => {\n       reply.sse({\n         data: message,\n       });\n     });\n\n     // Handle client disconnect\n     request.raw.on('close', async () => {\n       await subscriber.unsubscribe(`test_run:${id}`);\n       await subscriber.quit();\n     });\n   });\n   ```\n\n2. Implement SSE client in React\n   ```typescript\n   // src/hooks/useTestRunUpdates.ts\n   import { useState, useEffect } from 'react';\n\n   export interface TestProgressEvent {\n     type: 'step_start' | 'step_complete' | 'step_error' | 'test_complete';\n     stepId: string;\n     status: 'pending' | 'running' | 'success' | 'failed';\n     message?: string;\n     snapshot?: string;\n     timestamp: Date;\n   }\n\n   export function useTestRunUpdates(testRunId: string) {\n     const [events, setEvents] = useState<TestProgressEvent[]>([]);\n     const [isConnected, setIsConnected] = useState(false);\n     const [error, setError] = useState<Error | null>(null);\n\n     useEffect(() => {\n       if (!testRunId) return;\n\n       const eventSource = new EventSource(`/sse/test-run/${testRunId}`);\n\n       eventSource.onopen = () => {\n         setIsConnected(true);\n       };\n\n       eventSource.onmessage = (event) => {\n         try {\n           const data = JSON.parse(event.data) as TestProgressEvent;\n           setEvents((prev) => [...prev, data]);\n         } catch (err) {\n           console.error('Error parsing SSE event:', err);\n         }\n       };\n\n       eventSource.onerror = (err) => {\n         setError(err instanceof Error ? err : new Error('SSE connection error'));\n         setIsConnected(false);\n         eventSource.close();\n       };\n\n       return () => {\n         eventSource.close();\n         setIsConnected(false);\n       };\n     }, [testRunId]);\n\n     return { events, isConnected, error };\n   }\n   ```\n\n3. Enhance the test run details page with real-time updates\n   ```typescript\n   // src/pages/TestRunDetails.tsx (updated with SSE hook)\n   import React, { useState, useEffect } from 'react';\n   import { useParams } from 'react-router-dom';\n   import { trpc } from '../utils/trpc';\n   import { useTestRunUpdates } from '../hooks/useTestRunUpdates';\n\n   const TestRunDetails = () => {\n     const { id } = useParams<{ id: string }>();\n     const [testRunData, setTestRunData] = useState<any>(null);\n     const [steps, setSteps] = useState<any[]>([]);\n\n     // Fetch initial data\n     const testRun = trpc.testRun.get.useQuery({ id: id! }, {\n       enabled: !!id,\n       onSuccess: (data) => {\n         setTestRunData(data);\n       },\n     });\n\n     const testSteps = trpc.testStep.list.useQuery({ testRunId: id! }, {\n       enabled: !!id,\n       onSuccess: (data) => {\n         setSteps(data);\n       },\n     });\n\n     // Subscribe to real-time updates\n     const { events, isConnected } = useTestRunUpdates(id!);\n\n     // Process incoming events\n     useEffect(() => {\n       if (events.length === 0) return;\n\n       const latestEvent = events[events.length - 1];\n\n       // Update test run status on completion\n       if (latestEvent.type === 'test_complete') {\n         testRun.refetch();\n       }\n\n       // Update step status\n       if (latestEvent.type.startsWith('step_')) {\n         const stepId = latestEvent.stepId;\n         const newStatus = latestEvent.status;\n\n         setSteps((currentSteps) =>\n           currentSteps.map((step) =>\n             step.id === stepId\n               ? {\n                   ...step,\n                   status: newStatus,\n                   errorMessage: latestEvent.message,\n                   snapshotUrl: latestEvent.snapshot || step.snapshotUrl,\n                 }\n               : step\n           )\n         );\n\n         // Update test run progress counts\n         if (latestEvent.type === 'step_complete' || latestEvent.type === 'step_error') {\n           setTestRunData((current) => ({\n             ...current,\n             completedSteps: current.completedSteps + 1,\n             failedSteps:\n               latestEvent.type === 'step_error'\n                 ? current.failedSteps + 1\n                 : current.failedSteps,\n           }));\n         }\n       }\n     }, [events]);\n\n     // Rest of the component remains the same...\n   };\n   ```\n\n4. Implement connection status indicator\n   ```tsx\n   // Connection status component\n   const ConnectionStatus = ({ isConnected }) => (\n     <div className=\"flex items-center mb-4\">\n       <div\n         className={`w-3 h-3 rounded-full mr-2 ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}\n       />\n       <span className=\"text-sm\">\n         {isConnected ? 'Live updates connected' : 'Live updates disconnected'}\n       </span>\n     </div>\n   );\n   ```\n\n5. Implement auto-reconnect functionality\n   ```typescript\n   // Enhanced useTestRunUpdates hook with reconnect logic\n   export function useTestRunUpdates(testRunId: string) {\n     const [events, setEvents] = useState<TestProgressEvent[]>([]);\n     const [isConnected, setIsConnected] = useState(false);\n     const [error, setError] = useState<Error | null>(null);\n     const [retryCount, setRetryCount] = useState(0);\n     const maxRetries = 5;\n\n     useEffect(() => {\n       if (!testRunId) return;\n\n       let eventSource: EventSource | null = null;\n       let retryTimeout: NodeJS.Timeout | null = null;\n\n       const connect = () => {\n         eventSource = new EventSource(`/sse/test-run/${testRunId}`);\n\n         eventSource.onopen = () => {\n           setIsConnected(true);\n           setRetryCount(0);\n           setError(null);\n         };\n\n         eventSource.onmessage = (event) => {\n           try {\n             const data = JSON.parse(event.data) as TestProgressEvent;\n             setEvents((prev) => [...prev, data]);\n           } catch (err) {\n             console.error('Error parsing SSE event:', err);\n           }\n         };\n\n         eventSource.onerror = (err) => {\n           setIsConnected(false);\n           eventSource?.close();\n           eventSource = null;\n\n           // Attempt to reconnect if we haven't exceeded max retries\n           if (retryCount < maxRetries) {\n             const nextRetryDelay = Math.min(1000 * Math.pow(2, retryCount), 30000);\n             console.log(`SSE connection error. Retrying in ${nextRetryDelay}ms...`);\n             \n             setRetryCount((prev) => prev + 1);\n             retryTimeout = setTimeout(connect, nextRetryDelay);\n           } else {\n             setError(new Error(`Failed to connect after ${maxRetries} retries`));\n           }\n         };\n       };\n\n       connect();\n\n       return () => {\n         if (eventSource) {\n           eventSource.close();\n         }\n         if (retryTimeout) {\n           clearTimeout(retryTimeout);\n         }\n         setIsConnected(false);\n       };\n     }, [testRunId, retryCount]);\n\n     return { events, isConnected, error };\n   }\n   ```",
        "testStrategy": "1. Test SSE connection establishment and event handling\n2. Verify that events are correctly processed and displayed\n3. Test reconnection logic with simulated network failures\n4. Verify that the UI updates in real-time as events arrive\n5. Test with concurrent test runs to ensure events are properly routed",
        "priority": "high",
        "dependencies": [
          3,
          4,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Test Results Storage and Reporting",
        "description": "Implement test results storage in Supabase and generate detailed HTML reports",
        "details": "1. Enhance test step storage with additional metadata\n   ```typescript\n   // src/lib/playwright/index.ts (update runPlaywrightTest function)\n   // Add DOM state capture\n   const domState = await captureDOMState(page);\n   \n   // Update step with DOM state\n   await supabase\n     .from('test_steps')\n     .update({\n       status: 'success',\n       snapshot_url: urlData.publicUrl,\n       console_logs: consoleLogs,\n       dom_state: domState,\n       duration,\n     })\n     .eq('id', step.id);\n   ```\n\n2. Implement HTML report generation\n   ```typescript\n   // src/lib/reporting/index.ts\n   import { supabase } from '../supabase';\n\n   export async function generateHtmlReport(testRunId: string): Promise<string> {\n     // Fetch test run data\n     const { data: testRun, error: testRunError } = await supabase\n       .from('test_runs')\n       .select('*, test_case:test_case_id(*)')\n       .eq('id', testRunId)\n       .single();\n\n     if (testRunError) throw testRunError;\n\n     // Fetch test steps\n     const { data: steps, error: stepsError } = await supabase\n       .from('test_steps')\n       .select('*')\n       .eq('test_run_id', testRunId)\n       .order('step_number', { ascending: true });\n\n     if (stepsError) throw stepsError;\n\n     // Generate HTML\n     const html = `\n     <!DOCTYPE html>\n     <html lang=\"en\">\n     <head>\n       <meta charset=\"UTF-8\">\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n       <title>Test Report: ${testRun.test_case.name}</title>\n       <style>\n         body {\n           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n           line-height: 1.6;\n           color: #333;\n           max-width: 1200px;\n           margin: 0 auto;\n           padding: 20px;\n         }\n         .header {\n           background-color: #f8f9fa;\n           padding: 20px;\n           border-radius: 5px;\n           margin-bottom: 30px;\n         }\n         .summary {\n           display: flex;\n           justify-content: space-between;\n           margin-bottom: 20px;\n         }\n         .summary-item {\n           text-align: center;\n           padding: 10px;\n           background-color: #fff;\n           border-radius: 5px;\n           box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n           flex: 1;\n           margin: 0 10px;\n         }\n         .step {\n           background-color: #fff;\n           border: 1px solid #e9ecef;\n           border-radius: 5px;\n           padding: 15px;\n           margin-bottom: 15px;\n         }\n         .step-header {\n           display: flex;\n           justify-content: space-between;\n           align-items: center;\n           margin-bottom: 10px;\n         }\n         .step-content {\n           margin-top: 15px;\n         }\n         .success { color: #28a745; }\n         .failed { color: #dc3545; }\n         .pending { color: #6c757d; }\n         .running { color: #007bff; }\n         .screenshot {\n           max-width: 100%;\n           border: 1px solid #ddd;\n           border-radius: 4px;\n           margin-top: 10px;\n         }\n         .console-log {\n           background-color: #f8f9fa;\n           padding: 10px;\n           border-radius: 4px;\n           font-family: monospace;\n           white-space: pre-wrap;\n           margin-top: 10px;\n         }\n         .progress-bar {\n           height: 10px;\n           background-color: #e9ecef;\n           border-radius: 5px;\n           margin-bottom: 10px;\n         }\n         .progress-value {\n           height: 100%;\n           border-radius: 5px;\n           background-color: #007bff;\n         }\n       </style>\n     </head>\n     <body>\n       <div class=\"header\">\n         <h1>Test Report: ${testRun.test_case.name}</h1>\n         <p>URL: <a href=\"${testRun.test_case.url}\" target=\"_blank\">${testRun.test_case.url}</a></p>\n         <p>Started: ${new Date(testRun.started_at).toLocaleString()}</p>\n         <p>Completed: ${testRun.completed_at ? new Date(testRun.completed_at).toLocaleString() : 'In Progress'}</p>\n         <p>Status: <span class=\"${testRun.status}\">${testRun.status.toUpperCase()}</span></p>\n         \n         <div class=\"progress-bar\">\n           <div class=\"progress-value\" style=\"width: ${(testRun.completed_steps / testRun.total_steps) * 100}%\"></div>\n         </div>\n       </div>\n       \n       <div class=\"summary\">\n         <div class=\"summary-item\">\n           <h3>Total Steps</h3>\n           <p>${testRun.total_steps}</p>\n         </div>\n         <div class=\"summary-item\">\n           <h3>Completed</h3>\n           <p>${testRun.completed_steps}</p>\n         </div>\n         <div class=\"summary-item\">\n           <h3>Failed</h3>\n           <p class=\"${testRun.failed_steps > 0 ? 'failed' : ''}\">${testRun.failed_steps}</p>\n         </div>\n       </div>\n       \n       <h2>Test Steps</h2>\n       \n       ${steps.map(step => `\n         <div class=\"step\">\n           <div class=\"step-header\">\n             <h3>Step ${step.step_number}: ${getActionDescription(step)}</h3>\n             <span class=\"${step.status}\">${step.status.toUpperCase()}</span>\n           </div>\n           \n           ${step.error_message ? `<p class=\"failed\">Error: ${step.error_message}</p>` : ''}\n           \n           <div class=\"step-content\">\n             ${step.duration ? `<p>Duration: ${step.duration}ms</p>` : ''}\n             \n             ${step.snapshot_url ? `\n               <div>\n                 <h4>Screenshot:</h4>\n                 <img src=\"${step.snapshot_url}\" alt=\"Step ${step.step_number} screenshot\" class=\"screenshot\">\n               </div>\n             ` : ''}\n             \n             ${step.console_logs && step.console_logs.length > 0 ? `\n               <div>\n                 <h4>Console Logs:</h4>\n                 <div class=\"console-log\">${step.console_logs.join('\\n')}</div>\n               </div>\n             ` : ''}\n           </div>\n         </div>\n       `).join('')}\n     </body>\n     </html>\n     `;\n\n     // Save report to Supabase Storage\n     const reportPath = `reports/${testRunId}.html`;\n     const { error: uploadError } = await supabase.storage\n       .from('test-reports')\n       .upload(reportPath, html, {\n         contentType: 'text/html',\n         upsert: true,\n       });\n\n     if (uploadError) throw uploadError;\n\n     // Get public URL\n     const { data: urlData } = supabase.storage\n       .from('test-reports')\n       .getPublicUrl(reportPath);\n\n     return urlData.publicUrl;\n   }\n\n   // Helper function to describe actions\n   function getActionDescription(step) {\n     switch (step.action) {\n       case 'navigate': return `Navigate to ${step.value}`;\n       case 'click': return `Click on ${step.selector}`;\n       case 'type': return `Type \"${step.value}\" into ${step.selector}`;\n       case 'assert': return `Assert that ${step.selector} contains \"${step.value}\"`;\n       default: return `${step.action} ${step.selector} ${step.value}`;\n     }\n   }\n   ```\n\n3. Add report generation to test run completion\n   ```typescript\n   // src/lib/testProcessor.ts (update processTestRun function)\n   // After test run is completed\n   if (testRun.status === 'completed') {\n     try {\n       // Generate HTML report\n       const reportUrl = await generateHtmlReport(testRunId);\n       \n       // Update test run with report URL\n       await supabase\n         .from('test_runs')\n         .update({ report_url: reportUrl })\n         .eq('id', testRunId);\n       \n       // Include report URL in completion event\n       await redisClient.publish(\n         `test_run:${testRunId}`,\n         JSON.stringify({\n           type: 'test_complete',\n           testRunId,\n           status: 'completed',\n           reportUrl,\n           timestamp: new Date(),\n         })\n       );\n     } catch (reportError) {\n       console.error('Error generating report:', reportError);\n     }\n   }\n   ```\n\n4. Add report viewing to the UI\n   ```tsx\n   // src/components/ReportViewer.tsx\n   import React from 'react';\n\n   interface ReportViewerProps {\n     reportUrl: string;\n   }\n\n   const ReportViewer: React.FC<ReportViewerProps> = ({ reportUrl }) => {\n     return (\n       <div className=\"mt-6\">\n         <h3 className=\"text-lg font-semibold mb-3\">Test Report</h3>\n         <div className=\"flex space-x-4\">\n           <a \n             href={reportUrl} \n             target=\"_blank\" \n             rel=\"noopener noreferrer\"\n             className=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600\"\n           >\n             View Full Report\n           </a>\n           <button\n             onClick={() => window.print()}\n             className=\"bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600\"\n           >\n             Print Report\n           </button>\n         </div>\n         <div className=\"mt-4 border rounded-md overflow-hidden\">\n           <iframe \n             src={reportUrl} \n             title=\"Test Report\" \n             className=\"w-full h-[600px] border-0\"\n           />\n         </div>\n       </div>\n     );\n   };\n\n   export default ReportViewer;\n   ```\n\n5. Add database schema for reports\n   ```sql\n   -- Add report_url column to test_runs table\n   ALTER TABLE test_runs ADD COLUMN report_url TEXT;\n   \n   -- Create a bucket for test reports\n   CREATE STORAGE BUCKET test_reports;\n   ```",
        "testStrategy": "1. Test report generation with various test run scenarios\n2. Verify that reports are correctly stored in Supabase Storage\n3. Test report viewing in the UI\n4. Verify that all test data (screenshots, logs, etc.) is correctly included in reports\n5. Test report generation for failed test runs",
        "priority": "medium",
        "dependencies": [
          2,
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Test Case Management and History",
        "description": "Implement test case management features including history, duplication, and rerunning tests",
        "details": "1. Implement test case list page\n   ```typescript\n   // src/pages/TestCaseList.tsx\n   import React from 'react';\n   import { Link } from 'react-router-dom';\n   import { trpc } from '../utils/trpc';\n\n   const TestCaseList = () => {\n     const testCases = trpc.testCase.list.useQuery();\n     const duplicateTestCase = trpc.testCase.duplicate.useMutation({\n       onSuccess: () => {\n         testCases.refetch();\n       },\n     });\n\n     const handleDuplicate = async (id: string) => {\n       try {\n         await duplicateTestCase.mutateAsync({ id });\n       } catch (error) {\n         console.error('Error duplicating test case:', error);\n       }\n     };\n\n     if (testCases.isLoading) {\n       return <div className=\"text-center py-10\">Loading test cases...</div>;\n     }\n\n     if (testCases.isError) {\n       return <div className=\"text-center py-10 text-red-500\">Error loading test cases</div>;\n     }\n\n     return (\n       <div>\n         <div className=\"flex justify-between items-center mb-6\">\n           <h1 className=\"text-2xl font-bold\">Test Cases</h1>\n           <Link\n             to=\"/create\"\n             className=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600\"\n           >\n             Create New Test\n           </Link>\n         </div>\n\n         {testCases.data?.length === 0 ? (\n           <div className=\"text-center py-10 bg-white rounded-lg shadow\">\n             <p className=\"text-gray-500\">No test cases found</p>\n             <Link\n               to=\"/create\"\n               className=\"inline-block mt-4 text-blue-500 hover:underline\"\n             >\n               Create your first test case\n             </Link>\n           </div>\n         ) : (\n           <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n             {testCases.data?.map((testCase) => (\n               <div\n                 key={testCase.id}\n                 className=\"bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow\"\n               >\n                 <h2 className=\"text-xl font-semibold mb-2\">{testCase.name}</h2>\n                 <p className=\"text-gray-600 text-sm mb-4 truncate\">{testCase.url}</p>\n                 \n                 <div className=\"text-sm text-gray-500 mb-4\">\n                   <p>Created: {new Date(testCase.created_at).toLocaleDateString()}</p>\n                 </div>\n                 \n                 <div className=\"flex space-x-2\">\n                   <Link\n                     to={`/test-case/${testCase.id}`}\n                     className=\"text-blue-500 hover:underline text-sm\"\n                   >\n                     View Details\n                   </Link>\n                   <button\n                     onClick={() => handleDuplicate(testCase.id)}\n                     className=\"text-gray-500 hover:underline text-sm\"\n                   >\n                     Duplicate\n                   </button>\n                   <Link\n                     to={`/test-case/${testCase.id}/run`}\n                     className=\"text-green-500 hover:underline text-sm\"\n                   >\n                     Run Test\n                   </Link>\n                 </div>\n               </div>\n             ))}\n           </div>\n         )}\n       </div>\n     );\n   };\n\n   export default TestCaseList;\n   ```\n\n2. Implement test case details page with history\n   ```typescript\n   // src/pages/TestCaseDetails.tsx\n   import React from 'react';\n   import { useParams, Link } from 'react-router-dom';\n   import { trpc } from '../utils/trpc';\n\n   const TestCaseDetails = () => {\n     const { id } = useParams<{ id: string }>();\n     const testCase = trpc.testCase.get.useQuery({ id: id! }, {\n       enabled: !!id,\n     });\n     \n     const testRuns = trpc.testRun.listByTestCase.useQuery({ testCaseId: id! }, {\n       enabled: !!id,\n     });\n\n     const createTestRun = trpc.testRun.create.useMutation({\n       onSuccess: (data) => {\n         window.location.href = `/test-run/${data.id}`;\n       },\n     });\n\n     const handleRunTest = async () => {\n       try {\n         await createTestRun.mutateAsync({ testCaseId: id! });\n       } catch (error) {\n         console.error('Error creating test run:', error);\n       }\n     };\n\n     if (testCase.isLoading) {\n       return <div className=\"text-center py-10\">Loading test case...</div>;\n     }\n\n     if (testCase.isError || !testCase.data) {\n       return <div className=\"text-center py-10 text-red-500\">Error loading test case</div>;\n     }\n\n     return (\n       <div>\n         <div className=\"mb-6\">\n           <Link to=\"/\" className=\"text-blue-500 hover:underline\">\n             &larr; Back to Test Cases\n           </Link>\n         </div>\n\n         <div className=\"bg-white p-6 rounded-lg shadow mb-6\">\n           <div className=\"flex justify-between items-start\">\n             <div>\n               <h1 className=\"text-2xl font-bold mb-2\">{testCase.data.name}</h1>\n               <p className=\"text-gray-600 mb-4\">\n                 <a href={testCase.data.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:underline\">\n                   {testCase.data.url}\n                 </a>\n               </p>\n             </div>\n             <button\n               onClick={handleRunTest}\n               disabled={createTestRun.isLoading}\n               className=\"bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 disabled:bg-green-300\"\n             >\n               {createTestRun.isLoading ? 'Starting...' : 'Run Test'}\n             </button>\n           </div>\n\n           <div className=\"mt-6\">\n             <h2 className=\"text-lg font-semibold mb-3\">Test Scenario</h2>\n             <div className=\"bg-gray-50 p-4 rounded-md whitespace-pre-wrap\">\n               {testCase.data.original_scenario}\n             </div>\n           </div>\n\n           {testCase.data.refined_scenario && (\n             <div className=\"mt-6\">\n               <h2 className=\"text-lg font-semibold mb-3\">AI Refined Scenario</h2>\n               <div className=\"bg-gray-50 p-4 rounded-md whitespace-pre-wrap\">\n                 {testCase.data.refined_scenario}\n               </div>\n             </div>\n           )}\n         </div>\n\n         <div className=\"bg-white p-6 rounded-lg shadow\">\n           <h2 className=\"text-lg font-semibold mb-4\">Test Run History</h2>\n\n           {testRuns.isLoading ? (\n             <p className=\"text-center py-4\">Loading test runs...</p>\n           ) : testRuns.data?.length === 0 ? (\n             <p className=\"text-center py-4 text-gray-500\">No test runs yet</p>\n           ) : (\n             <div className=\"overflow-x-auto\">\n               <table className=\"min-w-full divide-y divide-gray-200\">\n                 <thead className=\"bg-gray-50\">\n                   <tr>\n                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                       Run ID\n                     </th>\n                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                       Date\n                     </th>\n                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                       Status\n                     </th>\n                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                       Progress\n                     </th>\n                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                       Actions\n                     </th>\n                   </tr>\n                 </thead>\n                 <tbody className=\"bg-white divide-y divide-gray-200\">\n                   {testRuns.data?.map((run) => (\n                     <tr key={run.id}>\n                       <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                         {run.id.split('-')[0]}...\n                       </td>\n                       <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                         {new Date(run.started_at).toLocaleString()}\n                       </td>\n                       <td className=\"px-6 py-4 whitespace-nowrap\">\n                         <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(run.status)}`}>\n                           {run.status}\n                         </span>\n                       </td>\n                       <td className=\"px-6 py-4 whitespace-nowrap\">\n                         <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                           <div \n                             className={`h-2.5 rounded-full ${run.status === 'failed' ? 'bg-red-600' : 'bg-blue-600'}`}\n                             style={{ width: `${(run.completed_steps / run.total_steps) * 100}%` }}\n                           ></div>\n                         </div>\n                         <span className=\"text-xs text-gray-500\">\n                           {run.completed_steps} / {run.total_steps} steps\n                         </span>\n                       </td>\n                       <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                         <Link to={`/test-run/${run.id}`} className=\"text-blue-500 hover:underline\">\n                           View Details\n                         </Link>\n                         {run.report_url && (\n                           <a href={run.report_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"ml-3 text-green-500 hover:underline\">\n                             View Report\n                           </a>\n                         )}\n                       </td>\n                     </tr>\n                   ))}\n                 </tbody>\n               </table>\n             </div>\n           )}\n         </div>\n       </div>\n     );\n   };\n\n   // Helper function\n   function getStatusColor(status: string) {\n     switch (status) {\n       case 'completed': return 'bg-green-100 text-green-800';\n       case 'running': return 'bg-blue-100 text-blue-800';\n       case 'failed': return 'bg-red-100 text-red-800';\n       default: return 'bg-gray-100 text-gray-800';\n     }\n   }\n\n   export default TestCaseDetails;\n   ```\n\n3. Add test run history API endpoint\n   ```typescript\n   // src/router/testRun.ts (add to existing router)\n   listByTestCase: procedure\n     .input(z.object({ testCaseId: z.string().uuid() }))\n     .query(async ({ input }) => {\n       const { data, error } = await supabase\n         .from('test_runs')\n         .select('*')\n         .eq('test_case_id', input.testCaseId)\n         .order('started_at', { ascending: false });\n\n       if (error) throw error;\n       return data;\n     }),\n   ```\n\n4. Implement test case editing\n   ```typescript\n   // src/router/testCase.ts (add to existing router)\n   update: procedure\n     .input(z.object({\n       id: z.string().uuid(),\n       name: z.string(),\n       url: z.string().url(),\n       originalScenario: z.string(),\n     }))\n     .mutation(async ({ input }) => {\n       const { data, error } = await supabase\n         .from('test_cases')\n         .update({\n           name: input.name,\n           url: input.url,\n           original_scenario: input.originalScenario,\n           // Clear refined scenario when original is updated\n           refined_scenario: null,\n           updated_at: new Date().toISOString(),\n         })\n         .eq('id', input.id)\n         .select();\n\n       if (error) throw error;\n       return data[0];\n     }),\n   ```\n\n5. Implement test case edit page\n   ```typescript\n   // src/pages/EditTestCase.tsx\n   import React, { useState, useEffect } from 'react';\n   import { useParams, useNavigate } from 'react-router-dom';\n   import { trpc } from '../utils/trpc';\n\n   const EditTestCase = () => {\n     const { id } = useParams<{ id: string }>();\n     const navigate = useNavigate();\n     \n     const [name, setName] = useState('');\n     const [url, setUrl] = useState('');\n     const [scenario, setScenario] = useState('');\n     const [isSubmitting, setIsSubmitting] = useState(false);\n\n     const testCase = trpc.testCase.get.useQuery({ id: id! }, {\n       enabled: !!id,\n       onSuccess: (data) => {\n         setName(data.name);\n         setUrl(data.url);\n         setScenario(data.original_scenario);\n       },\n     });\n\n     const updateTestCase = trpc.testCase.update.useMutation({\n       onSuccess: () => {\n         navigate(`/test-case/${id}`);\n       },\n     });\n\n     const handleSubmit = async (e: React.FormEvent) => {\n       e.preventDefault();\n       setIsSubmitting(true);\n       \n       try {\n         await updateTestCase.mutateAsync({\n           id: id!,\n           name,\n           url,\n           originalScenario: scenario,\n         });\n       } catch (error) {\n         console.error('Error updating test case:', error);\n       } finally {\n         setIsSubmitting(false);\n       }\n     };\n\n     if (testCase.isLoading) {\n       return <div className=\"text-center py-10\">Loading test case...</div>;\n     }\n\n     if (testCase.isError) {\n       return <div className=\"text-center py-10 text-red-500\">Error loading test case</div>;\n     }\n\n     return (\n       <div className=\"max-w-2xl mx-auto bg-white p-6 rounded-lg shadow\">\n         <h1 className=\"text-2xl font-bold mb-6\">Edit Test Case</h1>\n         \n         <form onSubmit={handleSubmit}>\n           <div className=\"mb-4\">\n             <label className=\"block text-gray-700 mb-2\" htmlFor=\"name\">\n               Test Name\n             </label>\n             <input\n               id=\"name\"\n               type=\"text\"\n               className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n               value={name}\n               onChange={(e) => setName(e.target.value)}\n               required\n             />\n           </div>\n           \n           <div className=\"mb-4\">\n             <label className=\"block text-gray-700 mb-2\" htmlFor=\"url\">\n               Website URL\n             </label>\n             <input\n               id=\"url\"\n               type=\"url\"\n               className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n               value={url}\n               onChange={(e) => setUrl(e.target.value)}\n               placeholder=\"https://example.com\"\n               required\n             />\n           </div>\n           \n           <div className=\"mb-6\">\n             <label className=\"block text-gray-700 mb-2\" htmlFor=\"scenario\">\n               Test Scenario (in natural language)\n             </label>\n             <textarea\n               id=\"scenario\"\n               className=\"w-full px-3 py-2 border border-gray-300 rounded-md h-40\"\n               value={scenario}\n               onChange={(e) => setScenario(e.target.value)}\n               placeholder=\"Describe your test scenario in natural language...\"\n               required\n             />\n           </div>\n           \n           <div className=\"flex space-x-4\">\n             <button\n               type=\"submit\"\n               className=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 disabled:bg-blue-300\"\n               disabled={isSubmitting}\n             >\n               {isSubmitting ? 'Saving...' : 'Save Changes'}\n             </button>\n             \n             <button\n               type=\"button\"\n               className=\"bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600\"\n               onClick={() => navigate(`/test-case/${id}`)}\n             >\n               Cancel\n             </button>\n           </div>\n         </form>\n       </div>\n     );\n   };\n\n   export default EditTestCase;\n   ```",
        "testStrategy": "1. Test CRUD operations for test cases\n2. Verify test case duplication functionality\n3. Test test run history display\n4. Verify that editing a test case clears the refined scenario\n5. Test navigation between different pages",
        "priority": "medium",
        "dependencies": [
          3,
          7
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-04T07:52:38.175Z",
      "updated": "2025-07-04T07:52:38.175Z",
      "description": "Tasks for master context"
    }
  }
}